#!/bin/bash
export __GLOBAL_FZFVIM__=__GLOBAL_FZFVIM__

export __VIM_PROG__=/tmp/$__GLOBAL_FZFVIM__/__VIM_PROG__$$
export __VIM_ARG__=/tmp/$__GLOBAL_FZFVIM__/__VIM_ARG__$$
export __LF_DIR__=/tmp/$__GLOBAL_FZFVIM__/__LF_DIR__$$
export __VIM_LAST_FILE__=/tmp/$__GLOBAL_FZFVIM__/__VIM_LAST_FILE__$$
export __LAST_CMD__=/tmp/$__GLOBAL_FZFVIM__/__LAST_CMD__$$

export __VIMCD__=1
export __LFCD__=2
export __FZF__=3
export __FZFLIVE__=4
export __FZFLIVEHOME__=5
export __FZFHOMELIVE__=5
export __GREPVIM__=6
export __FGREPR__=7

(/bin/mkdir -p /tmp/$__GLOBAL_FZFVIM__ &)
(echo >$__VIM_PROG__ &)
(echo >$__VIM_ARG__ &)
(echo >$__LF_DIR__ &)
(echo >$__VIM_LAST_FILE__ &)
(echo >$__LAST_CMD__ &)

__vim_sel__()
{
	[ ! -f $__VIM_PROG__ ] 2>/dev/null && return
	local prog
	prog=$(<$__VIM_PROG__)
	local arg
	if [ ! -f $__VIM_ARG__ ] 2>/dev/null; then
		arg=''
	else
		arg=$(<$__VIM_ARG__)
	fi
	(/bin/rm -f $__VIM_ARG__ &) >/dev/null 2>/dev/null
	(/bin/rm -f $__VIM_PROG__ &) >/dev/null 2>/dev/null
	case $prog in
	"$__VIMCD__") vimcd "$arg" ;;
	"$__LFCD__") lfcd "$arg" ;;
	"$__FZF__") fzfvim "$arg" ;;
	"$__FZFLIVE__") fzflive "$arg" ;;
	"$__FZFLIVEHOME__") fzflive "$arg" ;;
	"$__GREPVIM__") grepvim "$arg" ;;
	"$__FGREPR__") fgreprfzf "$arg" ;;
	esac
}

__last_cmd__()
{
	[ -f $__LAST_CMD__ ] || return
	case $(<$__LAST_CMD__) in
	"$__VIMCD__") vimcd "$(<$__VIM_LAST_FILE__)" ;;
	esac
}

lfcd()
{
	echo >$__LAST_CMD__
	lf -last-dir-path="$__LF_DIR__" "$@" 2>/dev/null &&
		__vim_sel__
	local dir
	dir=$(<$__LF_DIR__)
	(/bin/rm -f $__LF_DIR__ >/dev/null 2>/dev/null &)
	clear
	[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir" || return
}

fzfbase()
{
	if [ ! "$1" ]; then
		__last_cmd__
	elif [ -f "$1" ]; then
		vimcd "$1"
	else
		lfcd "$1"
	fi
}

fzfvim()
{
	cd "$1" || return
	fzfbase "$(fzfdef)"
}

fzflive()
{
	cd "$1" || return
	fzfbase "$(fzfpreview)"
}

# rg -j $__NPROC__ --line-number --no-heading --color=always --smart-case ''

grepvim()
{
	local out
	out=$(catvr "$1" | fzf -d ':' -n 2.. --ansi --preview-window 'down:20%:+{2}' --preview 'bat --style=numbers --color=always --highlight-line {2} {1}')
	if [ ! "$out" ]; then
		__last_cmd__
	else
		vimcd -c ":$(echo "$out" | cut -d':' -f2)" "${out%%:*}"
	fi
}

vimcd()
{
	local cmd
	local file
	case $1 in
	'')
		cmd=$EDITOR
		file=
		;;
	'-c')
		file=$(realpath "$3")
		[ -f "$file" ] || return
		cd "${file%/?*}" || return
		cmd=$EDITOR
		set -- -c "$2"
		;;
	*)
		file=$(realpath "${@##* }")
		if [ -f "$file" ]; then
			cd "${file%/?*}" || return
			cmd=$EDITOR
		elif [ -d "$file" ]; then
			cd "$file" || return
			cmd=lfcd
		else
			cd "$(dirname "$file")" || return
			( (sleep 10 && [ -f "$file" ] && touch "$file" &) &) >/dev/null 2>/dev/null
			cmd=$EDITOR
		fi
		shift
		;;
	esac
	(echo $__VIMCD__ >$__LAST_CMD__ &)
	$cmd "$file" "$@" &&
		__vim_sel__
}

mkdir()
{
	local file
	file=$(realpath "${@##* }" 2>/dev/null)
	[ -d "$file" ] || (fzf_update_dir "$file" &)
	/bin/mkdir "$@"
}

touch()
{
	local file
	file=$(realpath "${@##* }" 2>/dev/null)
	[ -f "$file" ] || (fzf_update_dir "$file" &)
	/bin/touch "$@"
}
