#!/bin/sh
__VIM_PROG__="$(mktemp -uq)__VIM_PROG__"
__VIM_ARG__="$(mktemp -uq)__VIM_ARG__"
__LF_DIR__="$(mktemp -uq)__LF_DIR__"
export __VIM_PROG__
export __VIM_ARG__
export __LF_DIR__

lfcd()
{
	lf -last-dir-path="$__LF_DIR__" "$@" &&
		__vim_sel__
	if [ -f "$__LF_DIR__" ]; then
		local __lf_dir__=$(<$__LF_DIR__)
		[ -d "$__lf_dir__" ] && [ "$__lf_dir__" != "$(pwd)" ] && cd "$__lf_dir__"
	fi
}

__FZF__()
{
	file=$($@)
	[ ! $file ] && return
	if [ -f "$file" ]; then
		vimcd $file
	else
		lfcd $file
	fi
}

fzfvim()
{
	__FZF__ fzfdef $@
}
fzfexact()
{
	__FZF__ fzfdef -e $@
}
fzflive()
{
	__FZF__ fzfpreview
}
fzfexactlive()
{
	__FZF__ fzfpreview -e
}

vimcd()
{
	local __vim_cmd__
	local __vim_file__
	case $1 in
	'')
		__vim_cmd__=$EDITOR
		__vim_file__=
		;;
	*)
		__vim_file__=$(realpath ${@##* })
		if [ -f $__vim_file__ ]; then
			cd ${__vim_file__%/?*}
			__vim_cmd__=$EDITOR
		elif [ -d $__vim_file__ ]; then
			cd $__vim_file__
			__vim_cmd__=lfcd
		else
			cd $(dirname $__vim_file__)
			touch $__vim_file__
			__vim_cmd__=$EDITOR
		fi
		shift
		;;
	esac
	$__vim_cmd__ $__vim_file__ $@ &&
		__vim_sel__
}

export __VIMCD__=1
export __LFCD__=2
export __FZF__=3
export __FZFLIVE__=4
export __FZFEXACT__=5
export __FZFEXACTLIVE__=6
export __FZFLIVEEXACT__=6

__vim_sel__()
{
	[ ! -f $__VIM_PROG__ ] 2>/dev/null && return
	local __local_vim_prog__=$(<$__VIM_PROG__)
	if [ ! -f $__VIM_ARG__ ] 2>/dev/null; then
		local __local_vim_arg__=''
	else
		local __local_vim_arg__=$(<$__VIM_ARG__)
	fi
	(/bin/rm -f $__VIM_PROG__ &)
	(/bin/rm -f $__VIM_ARG__ &)
	case $__local_vim_prog__ in
	$__VIMCD__) vimcd $__local_vim_arg__ ;;
	$__LFCD__) lfcd $__local_vim_arg__ ;;
	$__FZF__) fzfvim $__local_vim_arg__ ;;
	$__FZFLIVE__) fzflive $__local_vim_arg__ ;;
	$__FZFEXACT__) fzfexact $__local_vim_arg__ ;;
	$__FZFEXACTLIVE__) fzfexactlive $__local_vim_arg__ ;;
	esac
}

mkdir()
{
	file=$(realpath $1 2>/dev/null)
	[ -d $1 ] || fzf_update_dir $1
	/bin/mkdir $1
}

touch()
{
	file=$(realpath $1 2>/dev/null)
	[ -f $1 ] || fzf_update_dir $1
	/bin/touch $1
}
