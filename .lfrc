# Luke's lf settings
# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.
# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml:*.dxvk-cache:*.gpg"
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

cmd quitclear ${{
	([ $__VIM_PROG__ ] && /bin/rm -f $__VIM_PROG__ >/dev/null 2>/dev/null &)
	([ $__VIM_ARG__ ] && /bin/rm -f $__VIM_ARG__ >/dev/null 2>/dev/null &)
	lf -remote "send $id quit"
}}

cmd fzfvim ${{
	echo $__FZF__ >$__VIM_PROG__
	echo $PWD >$__VIM_ARG__
	(echo $__LFCD__ >$__LAST_CMD__ &)
	(echo $PWD >$__VIM_LAST_FILE__ &)
	lf -remote "send $id quit"
}}

cmd grepvim ${{
	echo $__GREPVIM__ >$__VIM_PROG__
	echo $PWD >$__VIM_ARG__
	(echo $__LFCD__ >$__LAST_CMD__ &)
	(echo $PWD >$__VIM_LAST_FILE__ &)
	lf -remote "send $id quit"
}}

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) zathura $fx;;
        text/*|application/json|inode/x-empty|application/x-subrip)
		echo $__VIMCD__ >$__VIM_PROG__
		echo "$fx" >$__VIM_ARG__
		lf -remote "send $id quit"
		;;
	image/x-xcf) gimp $fx ;;
	image/svg+xml) display -- $f ;;
	image/*) sxiv $fx
		;;
	audio/*|video/x-ms-asf) mpv --really-quiet --audio-display=no $f ;;
	video/*) mpv --really-quiet $fx ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted)
		echo $__VIMCD__ >$__VIM_PROG__
		echo "$fx" >$__VIM_ARG__
		lf -remote "send $id quit"
		;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract? (Y\N)"
	read ans
	[ $ans = 'Y' ] && aunpack $fx
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete? (Y\N)"
	read ans
	[ $ans = 'Y' ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where? "
	# dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	dest="$(fh)" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where? "
	# dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	dest="$(fh)" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copied to $dest."
}}

cmd convert2mov ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "convert to mov? (Y\N)"
	read ans
	[ $ans = 'Y' ] && alacritty -e 2mov $fx &
}}

cmd upscale4thumbnail ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "upscale? (Y\N)"
	read ans
	[ $ans = 'Y' ] && alacritty -e res4thum $fx &
}}

cmd forceupscale ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "force upscale? (Y\N)"
	read ans
	[ $ans = 'Y' ] && alacritty -e waifu2xauto $fx 4 &
}}

cmd opengimp ${{
	gimp $fx &
}}

cmd upvid ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "upscale vid(s)? (Y\N)"
	read ans
	[ $ans = 'Y' ] && { st -e upvid $fx;} &
}}

cmd setbg "$1"
cmd bulkrename $vidir
# Bindings
map <c-f> fzfvim
map <c-r> grepvim
# map <c-f> $lf -remote "send $id select \"$(fzfdef)\""
# map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzfp)"
# map gh
map q quitclear
map g top
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>
map . set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f
map A rename # at the very end
map n push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b> # after extension
map B bulkrename
map b $setbg $f
map <c-e> down
map <c-y> up
map W $setsid -f $TERMINAL >/dev/null 2>&1
map Y $printf "%s" "$fx" | xclip -selection clipboard
map m convert2mov
map u upvid
map O opengimp
map v push :!nvim<space>
map c push :mv<space>
map Z $fx
# Source Bookmarks
# source "~/.local/share/alias/aliases"
