#!/bin/sh
file=$1
cpp_ver='-std=gnu++17'
comp_flags='-Wall -Wextra -Warray-bounds -Wshadow -Wuninitialized -Wunused-variable -Wnull-dereference -Wformat'
analyzer='-fanalyzer'
case "$2" in
	's')
		comp_flags="$comp_flags $analyzer"
		[ -n "$3" ] && OLevel="-O$3 -flto";;
	*)
		if [ -n "$2" ]
		then
			OLevel="-O$3 -flto"
			[ -n "$3" ] && comp_flags="$comp_flags $analyzer"
		fi
esac
[ -n "$2" ] && OLevel="-O$2 -flto"
cwd_files=$(find . -type f -name '*.c' -o -name '*.cpp' 2> /dev/null)
get_incl(){ sed -n "s/#[[:space:]]*include[[:space:]]*\"\([^[:space:]]*\).*\".*$1/\1$1/p" "$2";}
get_incl_c(){ get_incl .c "$1";}
get_incl_cpp(){ get_incl .cpp "$1";}
get_incl_gch(){ get_incl .gch "$1";}
case $file in
	*.c);; *.cpp);;
	*)
		case $cwd_files in
			*$file.cpp*)
				file=$file.cpp;;
			*$file.c*)
				file=$file.c;;
			*)
				echo 'not a .c or .cpp file!'
				return
		esac
esac
incl_c=$(get_incl_c "$file")
incl_precomp=$(get_incl_gch "$file")
case $file in
	*.cpp)
		incl_cpp=$(get_incl_cpp "$file")
		if [ -z "$(echo "$incl_cpp" "$incl_c" "$incl_precomp")" ]
		then
			echo g++ $cpp_ver "$comp_flags" "$file" "$incl_precomp" -o "$(basename "$file" .cpp)" "$OLevel"
			g++ $cpp_ver $comp_flags $file $incl_precomp -o $(basename $file .cpp) $OLevel || return
		else
			if [ -n "$incl_c" ]
			then
				gcc $comp_flags -c $incl_c $OLevel &
				echo gcc "$comp_flags" -c "$incl_c" "$OLevel" &
			fi
			wait
			[ -n "$incl_c" ] && incl_c=${incl_c%.*}.o
			obj=$(find . -name '*.o')
			echo g++ $cpp_ver "$file" "$comp_flags" "$incl_c"pp ./*.o -o "$(basename "$file" .cpp)" "$OLevel"
			g++ $cpp_ver $file $comp_flags $incl_cpp $obj -o $(basename $file .cpp) $OLevel || return
		fi;;
	*.c)
		echo gcc "$comp_flags" "$file" "$incl_c" "$incl_precomp" -o "$(basename "$file" .c)" "$OLevel"
		gcc $comp_flags $file $incl_c $incl_precomp -o $(basename $file .c) $OLevel || return
esac
exec ./${file%.*}
