#!/usr/bin/dash
file=$1
cpp_ver='-std=gnu++17'
comp_flags='-Wall -Wextra -Warray-bounds -Wshadow -Wuninitialized -Wunused-variable -Wnull-dereference -Wformat'
analyzer='-fanalyzer -Wanalyzer-double-fclose -Wanalyzer-double-free -Wanalyzer-exposure-through-output-file -Wanalyzer-file-leak -Wanalyzer-free-of-non-heap -Wanalyzer-malloc-leak -Wanalyzer-null-argument -Wanalyzer-null-dereference -Wanalyzer-possible-null-argument -Wanalyzer-possible-null-dereference -Wanalyzer-stale-setjmp-buffer -Wanalyzer-tainted-array-index -Wanalyzer-too-complex -Wanalyzer-unsafe-call-within-signal-handler -Wanalyzer-use-after-free -Wanalyzer-use-of-pointer-in-stale-stack-frame'
case "$2" in
	's')
		comp_flags="$comp_flags $analyzer"
		[ -n "$3" ] && OLevel="-O$3 -flto"
		;;
	*)
	if [ -n "$2" ]; then
		OLevel="-O$3 -flto"
		[ -n "$3" ] && comp_flags="$comp_flags $analyzer"
	fi
esac
[ -n "$2" ] && OLevel="-O$2 -flto"
cwd_files=$(find . -maxdepth 1 -type f)
get_incl(){ sed -n "s/#[[:space:]]*include[[:space:]]*\"\([^[:space:]]*\).*\".*$1/\1$1/p" $2;}
get_incl_c(){ get_incl .c $1;}
get_incl_cpp(){ get_incl .cpp $1;}
get_incl_gch(){ get_incl .gch $1;}
case $file in
	*.cpp);;
	*.c);;
	*)
		if echo $cwd_files | grep -q -F "$file.cpp"; then
			file=$file.cpp
		elif echo $cwd_files | grep -q -F "$file.c"; then
			file=$file.c
		else
			echo 'not a .c or .cpp file'
			exit
		fi
esac
incl_c=$(get_incl_c $file)
incl_precomp=$(get_incl_precomp $file)
case $file in
	*.cpp)
		incl_cpp=$(get_incl_cpp $file)
		if [ -z "$(echo "$incl_cpp $incl_c $incl_precomp")" ]; then
			echo g++ $cpp_ver $comp_flags "$file" $incl_precomp -o "$(basename "$file" .cpp)" $OLevel
			g++ $cpp_ver $comp_flags "$file" $incl_precomp -o "$(basename "$file" .cpp)" $OLevel || return
		else
			if [ -n "$incl_c" ]; then
				gcc $comp_flags -c $incl_c $OLevel &
				echo gcc $comp_flags -c $incl_c $OLevel &
			fi
			wait
			[ -n "$incl_c" ] && incl_c=$(cleanext $incl_c).o
			obj=$(find . -name '*.\.o')
			echo g++ $cpp_ver $file $comp_flags $incl_cpp ./*.o -o "$(basename "$file" .cpp)" $OLevel
			g++ $cpp_ver $file $comp_flags $incl_cpp $obj -o "$(basename "$file" .cpp)" $OLevel || return
		fi;;
	*.c)
		echo gcc $comp_flags "$file" $incl_c $incl_precomp -o "$(basename "$file" .c)" $OLevel
		gcc $comp_flags "$file" $incl_c $incl_precomp -o "$(basename "$file" .c)" $OLevel || return
esac
./$(cleanext $file)
